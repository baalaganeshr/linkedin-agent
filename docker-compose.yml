# LinkedInScholar Docker Compose Configuration
version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: linkedinscholar-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-linkedinscholar}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - linkedinscholar-network

  # LinkedInScholar Application
  app:
    build: .
    container_name: linkedinscholar-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://mongodb:27017/${MONGO_DATABASE:-linkedinscholar}
      JWT_SECRET: ${JWT_SECRET}
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      GROQ_API_KEY: ${GROQ_API_KEY}
      OLLAMA_HOST: ${OLLAMA_HOST}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    volumes:
      - ./logs:/app/logs
    networks:
      - linkedinscholar-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: linkedinscholar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - linkedinscholar-network

volumes:
  mongodb_data:
    driver: local

networks:
  linkedinscholar-network:
    driver: bridge